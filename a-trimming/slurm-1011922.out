================================================================================
JOB STARTED: Wed Apr 16 08:47:43 PM EDT 2025
NODE: biomix51.dbi.local
SCRIPT /var/spool/slurm/d/job1011922/slurm_script:
#!/bin/bash
#SBATCH --job-name=trimming
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16

### SCRIPT TRIMS RAW SEQUENCE DATA
### SOFTWARE USED: TrimGalore!, cutadapt, FastQC

##JOB LOG HEADER - Puts a copy of this script &  other debugging info in "slurm.out"
  perl -E 'say"="x80'; echo "JOB STARTED: $(date)"; echo "NODE: $(hostname)"; echo "SCRIPT ${0}:"; cat $0; perl -E 'say"="x80'

## SOFTWARE REQUIREMENTS
  export PATH=$PATH:/usr/local/FastQC

## PRIMARY VARIABLES - commonly need to change                                                    # TIP: ${HOME} inserts your home directory
  FASTQ_IN="/work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz"     # FASTQ FILE LOCATION
  OUTDIR="${HOME}/exercises/gene_expression/a-trimming"                                               # OUTPUT DIRECTORY

## SECONDARY VARIABLES - rarely need to change
  MIN_LEN=50            # MINIMUM READ LENGTH TO KEEP
  MIN_QUAL=28           # MIN QUAL SCORE (PHRED) TO TRIM
  CPU=4                 # CPU CORES - TG oddly uses 4x this # - make sure #SBATCH requests enough (e.g. 16 for 4)

## COMMAND(s) TO RUN
  mkdir -p ${OUTDIR}    # MAKE SURE OUTPUT DIRECTORY EXISTS
  cd ${OUTDIR}          # CHANGE TO OUTPUT DIRECTORY

## Use _TrimGalore!_ to remove low quality sequences and adapters using _cutadapt_
 # It will also rerun _FastQC_ so you can see how the trimming worked...
    trim_galore \
      --length ${MIN_LEN} \
      --quality ${MIN_QUAL} \
      --cores ${CPU} \
      --fastqc \
      --fastqc_args "--threads ${SLURM_CPUS_PER_TASK}" \
      ${FASTQ_IN}

## JOB CLEANUP
  perl -E 'say"="x80'; echo "JOB COMPLETED: $(date)"; perl -E 'say"="x80'
================================================================================
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.4
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 4 cores
pigz 2.7
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 4 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	130636	AGATCGGAAGAGC	1000000	13.06
smallRNA	7	TGGAATTCTCGG	1000000	0.00
Nextera	6	CTGTCTCTTATA	1000000	0.00
Using Illumina adapter for trimming (count: 130636). Second best hit was smallRNA (count: 7)

Writing report to 'placenta_3a.s.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz
Trimming mode: single-end
Trim Galore version: 0.6.10
Cutadapt version: 4.4
Python version: 3.10.10
Number of cores used for trimming: 4
Quality Phred score cutoff: 28
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length before a sequence gets removed: 50 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '--threads 16'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.4). Setting -j 4
Writing final adapter and quality trimmed output to placenta_3a.s_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 28') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 4.4 with Python 3.10.10
Command line parameters: -j 4 -e 0.1 -q 28 -O 1 -a AGATCGGAAGAGC /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz
Processing single-end reads on 4 cores ...
Finished in 184.888 s (9.244 Âµs/read; 6.49 M reads/minute).

=== Summary ===

Total reads processed:              20,000,000
Reads with adapters:                 9,088,194 (45.4%)
Reads written (passing filters):    20,000,000 (100.0%)

Total basepairs processed: 2,020,000,000 bp
Quality-trimmed:             101,068,887 bp (5.0%)
Total written (filtered):  1,818,287,254 bp (90.0%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 9088194 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 28.0%
  C: 27.6%
  G: 26.6%
  T: 14.9%
  none/other: 2.9%

Overview of removed sequences
length	count	expect	max.err	error counts
1	3663501	5000000.0	0	3663501
2	1329367	1250000.0	0	1329367
3	355833	312500.0	0	355833
4	150217	78125.0	0	150217
5	91809	19531.2	0	91809
6	117861	4882.8	0	117861
7	100337	1220.7	0	100337
8	92077	305.2	0	92077
9	159638	76.3	0	159146 492
10	77458	19.1	1	76417 1041
11	66729	4.8	1	65733 996
12	110334	1.2	1	109114 1220
13	84180	0.3	1	83109 1071
14	90714	0.3	1	89427 1287
15	98865	0.3	1	97449 1416
16	91253	0.3	1	89676 1577
17	144267	0.3	1	142175 2092
18	132797	0.3	1	131022 1775
19	29537	0.3	1	28632 905
20	95406	0.3	1	93957 1449
21	84264	0.3	1	82727 1537
22	82188	0.3	1	80785 1403
23	83567	0.3	1	81916 1651
24	102156	0.3	1	100080 2076
25	101797	0.3	1	99806 1991
26	63153	0.3	1	61422 1731
27	99896	0.3	1	97449 2447
28	111281	0.3	1	108685 2596
29	96984	0.3	1	94573 2411
30	116050	0.3	1	114151 1899
31	23623	0.3	1	22590 1033
32	78127	0.3	1	76756 1371
33	60104	0.3	1	58460 1644
34	72768	0.3	1	71159 1609
35	46286	0.3	1	44111 2175
36	86892	0.3	1	85001 1891
37	43081	0.3	1	41132 1949
38	63332	0.3	1	61474 1858
39	46901	0.3	1	45332 1569
40	42126	0.3	1	40240 1886
41	45539	0.3	1	43713 1826
42	32299	0.3	1	30133 2166
43	40190	0.3	1	38934 1256
44	24482	0.3	1	23589 893
45	13354	0.3	1	12922 432
46	12547	0.3	1	11899 648
47	19382	0.3	1	18403 979
48	18162	0.3	1	17464 698
49	8690	0.3	1	7970 720
50	7899	0.3	1	7046 853
51	9897	0.3	1	9015 882
52	5001	0.3	1	4260 741
53	6297	0.3	1	5308 989
54	7688	0.3	1	5656 2032
55	5028	0.3	1	4401 627
56	1681	0.3	1	1167 514
57	1127	0.3	1	645 482
58	2735	0.3	1	1802 933
59	3529	0.3	1	2467 1062
60	2677	0.3	1	1108 1569
61	3114	0.3	1	2017 1097
62	2073	0.3	1	802 1271
63	2374	0.3	1	818 1556
64	6151	0.3	1	1107 5044
65	10003	0.3	1	2555 7448
66	6008	0.3	1	3142 2866
67	3419	0.3	1	1093 2326
68	4916	0.3	1	1144 3772
69	11321	0.3	1	1712 9609
70	23282	0.3	1	3567 19715
71	77760	0.3	1	7068 70692
72	46292	0.3	1	23102 23190
73	20513	0.3	1	8607 11906
74	4067	0.3	1	1804 2263
75	887	0.3	1	504 383
76	491	0.3	1	294 197
77	352	0.3	1	191 161
78	241	0.3	1	135 106
79	110	0.3	1	46 64
80	32	0.3	1	10 22
81	30	0.3	1	10 20
82	31	0.3	1	12 19
83	27	0.3	1	11 16
84	25	0.3	1	7 18
85	24	0.3	1	9 15
86	32	0.3	1	15 17
87	26	0.3	1	11 15
88	21	0.3	1	8 13
89	32	0.3	1	11 21
90	34	0.3	1	9 25
91	33	0.3	1	8 25
92	51	0.3	1	11 40
93	54	0.3	1	9 45
94	82	0.3	1	22 60
95	91	0.3	1	22 69
96	149	0.3	1	43 106
97	227	0.3	1	52 175
98	440	0.3	1	103 337
99	966	0.3	1	206 760
100	2915	0.3	1	694 2221
101	4538	0.3	1	996 3542

RUN STATISTICS FOR INPUT FILE: /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_3a.s.fastq.gz
=============================================
20000000 sequences processed in total
Sequences removed because they became shorter than the length cutoff of 50 bp:	1074992 (5.4%)


  >>> Now running FastQC on the data <<<

Started analysis of placenta_3a.s_trimmed.fq.gz
Approx 5% complete for placenta_3a.s_trimmed.fq.gz
Approx 10% complete for placenta_3a.s_trimmed.fq.gz
Approx 15% complete for placenta_3a.s_trimmed.fq.gz
Approx 20% complete for placenta_3a.s_trimmed.fq.gz
Approx 25% complete for placenta_3a.s_trimmed.fq.gz
Approx 30% complete for placenta_3a.s_trimmed.fq.gz
Approx 35% complete for placenta_3a.s_trimmed.fq.gz
Approx 40% complete for placenta_3a.s_trimmed.fq.gz
Approx 45% complete for placenta_3a.s_trimmed.fq.gz
Approx 50% complete for placenta_3a.s_trimmed.fq.gz
Approx 55% complete for placenta_3a.s_trimmed.fq.gz
Approx 60% complete for placenta_3a.s_trimmed.fq.gz
Approx 65% complete for placenta_3a.s_trimmed.fq.gz
Approx 70% complete for placenta_3a.s_trimmed.fq.gz
Approx 75% complete for placenta_3a.s_trimmed.fq.gz
Approx 80% complete for placenta_3a.s_trimmed.fq.gz
Approx 85% complete for placenta_3a.s_trimmed.fq.gz
Approx 90% complete for placenta_3a.s_trimmed.fq.gz
Approx 95% complete for placenta_3a.s_trimmed.fq.gz
Approx 100% complete for placenta_3a.s_trimmed.fq.gz
Analysis complete for placenta_3a.s_trimmed.fq.gz
================================================================================
JOB COMPLETED: Wed Apr 16 08:52:57 PM EDT 2025
================================================================================
