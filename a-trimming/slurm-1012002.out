================================================================================
JOB STARTED: Wed Apr 16 11:02:43 PM EDT 2025
NODE: biomix14.dbi.local
SCRIPT /var/spool/slurm/d/job1012002/slurm_script:
#!/bin/bash
#SBATCH --job-name=trimming
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16

### SCRIPT TRIMS RAW SEQUENCE DATA
### SOFTWARE USED: TrimGalore!, cutadapt, FastQC

##JOB LOG HEADER - Puts a copy of this script &  other debugging info in "slurm.out"
  perl -E 'say"="x80'; echo "JOB STARTED: $(date)"; echo "NODE: $(hostname)"; echo "SCRIPT ${0}:"; cat $0; perl -E 'say"="x80'

## SOFTWARE REQUIREMENTS
  export PATH=$PATH:/usr/local/FastQC

## PRIMARY VARIABLES - commonly need to change                                                    # TIP: ${HOME} inserts your home directory
  FASTQ_IN="/work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz"     # FASTQ FILE LOCATION
  OUTDIR="${HOME}/exercises/gene_expression/a-trimming"                                               # OUTPUT DIRECTORY

## SECONDARY VARIABLES - rarely need to change
  MIN_LEN=50            # MINIMUM READ LENGTH TO KEEP
  MIN_QUAL=28           # MIN QUAL SCORE (PHRED) TO TRIM
  CPU=4                 # CPU CORES - TG oddly uses 4x this # - make sure #SBATCH requests enough (e.g. 16 for 4)

## COMMAND(s) TO RUN
  mkdir -p ${OUTDIR}    # MAKE SURE OUTPUT DIRECTORY EXISTS
  cd ${OUTDIR}          # CHANGE TO OUTPUT DIRECTORY

## Use _TrimGalore!_ to remove low quality sequences and adapters using _cutadapt_
 # It will also rerun _FastQC_ so you can see how the trimming worked...
    trim_galore \
      --length ${MIN_LEN} \
      --quality ${MIN_QUAL} \
      --cores ${CPU} \
      --fastqc \
      --fastqc_args "--threads ${SLURM_CPUS_PER_TASK}" \
      ${FASTQ_IN}

## JOB CLEANUP
  perl -E 'say"="x80'; echo "JOB COMPLETED: $(date)"; perl -E 'say"="x80'
================================================================================
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.4
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 4 cores
pigz 2.7
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 4 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	100697	AGATCGGAAGAGC	1000000	10.07
Nextera	12	CTGTCTCTTATA	1000000	0.00
smallRNA	7	TGGAATTCTCGG	1000000	0.00
Using Illumina adapter for trimming (count: 100697). Second best hit was Nextera (count: 12)

Writing report to 'placenta_6a.s.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz
Trimming mode: single-end
Trim Galore version: 0.6.10
Cutadapt version: 4.4
Python version: 3.10.10
Number of cores used for trimming: 4
Quality Phred score cutoff: 28
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length before a sequence gets removed: 50 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '--threads 16'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.4). Setting -j 4
Writing final adapter and quality trimmed output to placenta_6a.s_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 28') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 4.4 with Python 3.10.10
Command line parameters: -j 4 -e 0.1 -q 28 -O 1 -a AGATCGGAAGAGC /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz
Processing single-end reads on 4 cores ...
Finished in 189.936 s (9.497 Âµs/read; 6.32 M reads/minute).

=== Summary ===

Total reads processed:              20,000,000
Reads with adapters:                 8,726,820 (43.6%)
Reads written (passing filters):    20,000,000 (100.0%)

Total basepairs processed: 2,020,000,000 bp
Quality-trimmed:              58,947,135 bp (2.9%)
Total written (filtered):  1,884,821,500 bp (93.3%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 8726820 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 27.7%
  C: 30.0%
  G: 26.0%
  T: 14.9%
  none/other: 1.4%

Overview of removed sequences
length	count	expect	max.err	error counts
1	3970883	5000000.0	0	3970883
2	1412066	1250000.0	0	1412066
3	383993	312500.0	0	383993
4	139133	78125.0	0	139133
5	87766	19531.2	0	87766
6	93201	4882.8	0	93201
7	77731	1220.7	0	77731
8	83613	305.2	0	83613
9	103665	76.3	0	103163 502
10	75548	19.1	1	74461 1087
11	64356	4.8	1	63424 932
12	71855	1.2	1	70806 1049
13	76347	0.3	1	75281 1066
14	74995	0.3	1	73825 1170
15	81442	0.3	1	80245 1197
16	78825	0.3	1	77515 1310
17	101682	0.3	1	100048 1634
18	109942	0.3	1	108535 1407
19	51989	0.3	1	50972 1017
20	75050	0.3	1	73900 1150
21	78358	0.3	1	77062 1296
22	74352	0.3	1	73119 1233
23	74691	0.3	1	73450 1241
24	73325	0.3	1	72018 1307
25	73952	0.3	1	72668 1284
26	63762	0.3	1	62462 1300
27	80225	0.3	1	78662 1563
28	83812	0.3	1	82113 1699
29	76218	0.3	1	74348 1870
30	100515	0.3	1	98872 1643
31	44715	0.3	1	43722 993
32	60802	0.3	1	59413 1389
33	82614	0.3	1	81211 1403
34	25888	0.3	1	24730 1158
35	48525	0.3	1	47294 1231
36	32688	0.3	1	31273 1415
37	48565	0.3	1	47158 1407
38	32278	0.3	1	30832 1446
39	42362	0.3	1	39261 3101
40	48429	0.3	1	44971 3458
41	50750	0.3	1	49006 1744
42	25554	0.3	1	25062 492
43	1159	0.3	1	1022 137
44	3300	0.3	1	3113 187
45	9690	0.3	1	9278 412
46	13341	0.3	1	13036 305
47	3921	0.3	1	3687 234
48	7814	0.3	1	7550 264
49	7459	0.3	1	7175 284
50	6345	0.3	1	6038 307
51	6009	0.3	1	5625 384
52	4738	0.3	1	4012 726
53	4435	0.3	1	4180 255
54	764	0.3	1	573 191
55	1039	0.3	1	859 180
56	1807	0.3	1	1214 593
57	1736	0.3	1	1470 266
58	1029	0.3	1	659 370
59	1444	0.3	1	1092 352
60	1215	0.3	1	901 314
61	961	0.3	1	597 364
62	1713	0.3	1	582 1131
63	2561	0.3	1	554 2007
64	1261	0.3	1	581 680
65	1010	0.3	1	327 683
66	1406	0.3	1	326 1080
67	2266	0.3	1	410 1856
68	4698	0.3	1	518 4180
69	5210	0.3	1	927 4283
70	6991	0.3	1	910 6081
71	11897	0.3	1	1119 10778
72	27887	0.3	1	1756 26131
73	34350	0.3	1	3329 31021
74	6136	0.3	1	4243 1893
75	392	0.3	1	243 149
76	39	0.3	1	12 27
77	21	0.3	1	2 19
78	17	0.3	1	1 16
79	14	0.3	1	2 12
80	13	0.3	1	2 11
81	21	0.3	1	1 20
82	21	0.3	1	6 15
83	15	0.3	1	2 13
84	15	0.3	1	1 14
85	22	0.3	1	12 10
86	15	0.3	1	3 12
87	17	0.3	1	6 11
88	19	0.3	1	4 15
89	26	0.3	1	6 20
90	11	0.3	1	4 7
91	17	0.3	1	4 13
92	28	0.3	1	9 19
93	20	0.3	1	3 17
94	40	0.3	1	6 34
95	47	0.3	1	3 44
96	74	0.3	1	6 68
97	116	0.3	1	9 107
98	205	0.3	1	24 181
99	382	0.3	1	35 347
100	1056	0.3	1	73 983
101	2103	0.3	1	152 1951

RUN STATISTICS FOR INPUT FILE: /work/binf-courses/binf694/project_1/raw_data/placenta/placenta_6a.s.fastq.gz
=============================================
20000000 sequences processed in total
Sequences removed because they became shorter than the length cutoff of 50 bp:	613822 (3.1%)


  >>> Now running FastQC on the data <<<

Started analysis of placenta_6a.s_trimmed.fq.gz
Approx 5% complete for placenta_6a.s_trimmed.fq.gz
Approx 10% complete for placenta_6a.s_trimmed.fq.gz
Approx 15% complete for placenta_6a.s_trimmed.fq.gz
Approx 20% complete for placenta_6a.s_trimmed.fq.gz
Approx 25% complete for placenta_6a.s_trimmed.fq.gz
Approx 30% complete for placenta_6a.s_trimmed.fq.gz
Approx 35% complete for placenta_6a.s_trimmed.fq.gz
Approx 40% complete for placenta_6a.s_trimmed.fq.gz
Approx 45% complete for placenta_6a.s_trimmed.fq.gz
Approx 50% complete for placenta_6a.s_trimmed.fq.gz
Approx 55% complete for placenta_6a.s_trimmed.fq.gz
Approx 60% complete for placenta_6a.s_trimmed.fq.gz
Approx 65% complete for placenta_6a.s_trimmed.fq.gz
Approx 70% complete for placenta_6a.s_trimmed.fq.gz
Approx 75% complete for placenta_6a.s_trimmed.fq.gz
Approx 80% complete for placenta_6a.s_trimmed.fq.gz
Approx 85% complete for placenta_6a.s_trimmed.fq.gz
Approx 90% complete for placenta_6a.s_trimmed.fq.gz
Approx 95% complete for placenta_6a.s_trimmed.fq.gz
Analysis complete for placenta_6a.s_trimmed.fq.gz
================================================================================
JOB COMPLETED: Wed Apr 16 11:07:53 PM EDT 2025
================================================================================
