================================================================================
JOB STARTED: Tue Apr 15 07:24:10 PM EDT 2025
NODE: biomix51.dbi.local
SCRIPT /var/spool/slurm/d/job1010701/slurm_script:
#!/bin/bash
#SBATCH --job-name=trimming
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16

### SCRIPT TRIMS RAW SEQUENCE DATA
### SOFTWARE USED: TrimGalore!, cutadapt, FastQC

##JOB LOG HEADER - Puts a copy of this script &  other debugging info in "slurm.out"
  perl -E 'say"="x80'; echo "JOB STARTED: $(date)"; echo "NODE: $(hostname)"; echo "SCRIPT ${0}:"; cat $0; perl -E 'say"="x80'

## SOFTWARE REQUIREMENTS
  export PATH=$PATH:/usr/local/FastQC

## PRIMARY VARIABLES - commonly need to change                                                    # TIP: ${HOME} inserts your home directory
  FASTQ_IN="/work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz"     # FASTQ FILE LOCATION
  OUTDIR="${HOME}/exercises/gene_expression/a-trimming"                                               # OUTPUT DIRECTORY

## SECONDARY VARIABLES - rarely need to change
  MIN_LEN=50            # MINIMUM READ LENGTH TO KEEP
  MIN_QUAL=28           # MIN QUAL SCORE (PHRED) TO TRIM
  CPU=4                 # CPU CORES - TG oddly uses 4x this # - make sure #SBATCH requests enough (e.g. 16 for 4)

## COMMAND(s) TO RUN
  mkdir -p ${OUTDIR}    # MAKE SURE OUTPUT DIRECTORY EXISTS
  cd ${OUTDIR}          # CHANGE TO OUTPUT DIRECTORY

## Use _TrimGalore!_ to remove low quality sequences and adapters using _cutadapt_
 # It will also rerun _FastQC_ so you can see how the trimming worked...
    trim_galore \
      --length ${MIN_LEN} \
      --quality ${MIN_QUAL} \
      --cores ${CPU} \
      --fastqc \
      --fastqc_args "--threads ${SLURM_CPUS_PER_TASK}" \
      ${FASTQ_IN}

## JOB CLEANUP
  perl -E 'say"="x80'; echo "JOB COMPLETED: $(date)"; perl -E 'say"="x80'
================================================================================
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.4
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 4 cores
pigz 2.7
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 4 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	78172	AGATCGGAAGAGC	1000000	7.82
Nextera	43	CTGTCTCTTATA	1000000	0.00
smallRNA	29	TGGAATTCTCGG	1000000	0.00
Using Illumina adapter for trimming (count: 78172). Second best hit was Nextera (count: 43)

Writing report to 'bonemarrow_6a.s.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz
Trimming mode: single-end
Trim Galore version: 0.6.10
Cutadapt version: 4.4
Python version: 3.10.10
Number of cores used for trimming: 4
Quality Phred score cutoff: 28
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length before a sequence gets removed: 50 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '--threads 16'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.4). Setting -j 4
Writing final adapter and quality trimmed output to bonemarrow_6a.s_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 28') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 4.4 with Python 3.10.10
Command line parameters: -j 4 -e 0.1 -q 28 -O 1 -a AGATCGGAAGAGC /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz
Processing single-end reads on 4 cores ...
Finished in 188.170 s (9.409 Âµs/read; 6.38 M reads/minute).

=== Summary ===

Total reads processed:              20,000,000
Reads with adapters:                 8,301,042 (41.5%)
Reads written (passing filters):    20,000,000 (100.0%)

Total basepairs processed: 2,020,000,000 bp
Quality-trimmed:              57,756,998 bp (2.9%)
Total written (filtered):  1,909,693,031 bp (94.5%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 8301042 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 27.0%
  C: 29.2%
  G: 28.0%
  T: 15.6%
  none/other: 0.2%

Overview of removed sequences
length	count	expect	max.err	error counts
1	3994542	5000000.0	0	3994542
2	1534763	1250000.0	0	1534763
3	383270	312500.0	0	383270
4	142338	78125.0	0	142338
5	92397	19531.2	0	92397
6	107196	4882.8	0	107196
7	78505	1220.7	0	78505
8	86162	305.2	0	86162
9	114741	76.3	0	114314 427
10	70478	19.1	1	69466 1012
11	66154	4.8	1	65343 811
12	74267	1.2	1	73487 780
13	80282	0.3	1	79496 786
14	77559	0.3	1	76628 931
15	80223	0.3	1	79307 916
16	78544	0.3	1	77556 988
17	106173	0.3	1	105013 1160
18	102145	0.3	1	101018 1127
19	40872	0.3	1	40200 672
20	65888	0.3	1	65145 743
21	69022	0.3	1	68215 807
22	60172	0.3	1	59437 735
23	68727	0.3	1	67873 854
24	65597	0.3	1	64732 865
25	64582	0.3	1	63704 878
26	49564	0.3	1	48850 714
27	61094	0.3	1	60307 787
28	56586	0.3	1	55822 764
29	49329	0.3	1	48595 734
30	65776	0.3	1	65038 738
31	21678	0.3	1	21264 414
32	36799	0.3	1	36325 474
33	27998	0.3	1	27591 407
34	28851	0.3	1	28455 396
35	25005	0.3	1	24586 419
36	35531	0.3	1	35100 431
37	9801	0.3	1	9529 272
38	16305	0.3	1	16080 225
39	17643	0.3	1	17292 351
40	15186	0.3	1	14912 274
41	10076	0.3	1	9786 290
42	11340	0.3	1	10847 493
43	13196	0.3	1	12875 321
44	7068	0.3	1	6934 134
45	677	0.3	1	615 62
46	1114	0.3	1	1075 39
47	2679	0.3	1	2606 73
48	3803	0.3	1	3728 75
49	977	0.3	1	929 48
50	1885	0.3	1	1843 42
51	1549	0.3	1	1486 63
52	1134	0.3	1	1080 54
53	1074	0.3	1	1014 60
54	1005	0.3	1	902 103
55	1152	0.3	1	1083 69
56	220	0.3	1	176 44
57	250	0.3	1	210 40
58	518	0.3	1	422 96
59	666	0.3	1	601 65
60	299	0.3	1	240 59
61	376	0.3	1	318 58
62	323	0.3	1	262 61
63	254	0.3	1	197 57
64	409	0.3	1	274 135
65	547	0.3	1	310 237
66	486	0.3	1	416 70
67	293	0.3	1	219 74
68	358	0.3	1	264 94
69	541	0.3	1	320 221
70	895	0.3	1	403 492
71	1196	0.3	1	681 515
72	1425	0.3	1	735 690
73	1984	0.3	1	728 1256
74	3346	0.3	1	990 2356
75	3809	0.3	1	1487 2322
76	1544	0.3	1	1276 268
77	80	0.3	1	54 26
78	14	0.3	1	4 10
79	17	0.3	1	2 15
80	4	0.3	1	1 3
81	14	0.3	1	1 13
82	22	0.3	1	2 20
83	18	0.3	1	8 10
84	20	0.3	1	9 11
85	21	0.3	1	6 15
86	20	0.3	1	3 17
87	10	0.3	1	5 5
88	18	0.3	1	9 9
89	16	0.3	1	9 7
90	14	0.3	1	7 7
91	19	0.3	1	6 13
92	37	0.3	1	7 30
93	12	0.3	1	2 10
94	15	0.3	1	7 8
95	10	0.3	1	5 5
96	10	0.3	1	1 9
97	24	0.3	1	6 18
98	35	0.3	1	4 31
99	48	0.3	1	5 43
100	131	0.3	1	25 106
101	200	0.3	1	34 166

RUN STATISTICS FOR INPUT FILE: /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6a.s.fastq.gz
=============================================
20000000 sequences processed in total
Sequences removed because they became shorter than the length cutoff of 50 bp:	512098 (2.6%)


  >>> Now running FastQC on the data <<<

Started analysis of bonemarrow_6a.s_trimmed.fq.gz
Approx 5% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 10% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 15% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 20% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 25% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 30% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 35% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 40% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 45% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 50% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 55% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 60% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 65% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 70% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 75% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 80% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 85% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 90% complete for bonemarrow_6a.s_trimmed.fq.gz
Approx 95% complete for bonemarrow_6a.s_trimmed.fq.gz
Analysis complete for bonemarrow_6a.s_trimmed.fq.gz
================================================================================
JOB COMPLETED: Tue Apr 15 07:29:32 PM EDT 2025
================================================================================
