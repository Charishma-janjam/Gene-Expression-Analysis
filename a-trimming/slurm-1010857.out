================================================================================
JOB STARTED: Tue Apr 15 10:59:42 PM EDT 2025
NODE: biomix14.dbi.local
SCRIPT /var/spool/slurm/d/job1010857/slurm_script:
#!/bin/bash
#SBATCH --job-name=trimming
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16

### SCRIPT TRIMS RAW SEQUENCE DATA
### SOFTWARE USED: TrimGalore!, cutadapt, FastQC

##JOB LOG HEADER - Puts a copy of this script &  other debugging info in "slurm.out"
  perl -E 'say"="x80'; echo "JOB STARTED: $(date)"; echo "NODE: $(hostname)"; echo "SCRIPT ${0}:"; cat $0; perl -E 'say"="x80'

## SOFTWARE REQUIREMENTS
  export PATH=$PATH:/usr/local/FastQC

## PRIMARY VARIABLES - commonly need to change                                                    # TIP: ${HOME} inserts your home directory
  FASTQ_IN="/work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz"     # FASTQ FILE LOCATION
  OUTDIR="${HOME}/exercises/gene_expression/a-trimming"                                               # OUTPUT DIRECTORY

## SECONDARY VARIABLES - rarely need to change
  MIN_LEN=50            # MINIMUM READ LENGTH TO KEEP
  MIN_QUAL=28           # MIN QUAL SCORE (PHRED) TO TRIM
  CPU=4                 # CPU CORES - TG oddly uses 4x this # - make sure #SBATCH requests enough (e.g. 16 for 4)

## COMMAND(s) TO RUN
  mkdir -p ${OUTDIR}    # MAKE SURE OUTPUT DIRECTORY EXISTS
  cd ${OUTDIR}          # CHANGE TO OUTPUT DIRECTORY

## Use _TrimGalore!_ to remove low quality sequences and adapters using _cutadapt_
 # It will also rerun _FastQC_ so you can see how the trimming worked...
    trim_galore \
      --length ${MIN_LEN} \
      --quality ${MIN_QUAL} \
      --cores ${CPU} \
      --fastqc \
      --fastqc_args "--threads ${SLURM_CPUS_PER_TASK}" \
      ${FASTQ_IN}

## JOB CLEANUP
  perl -E 'say"="x80'; echo "JOB COMPLETED: $(date)"; perl -E 'say"="x80'
================================================================================
Path to Cutadapt set as: 'cutadapt' (default)
Cutadapt seems to be working fine (tested command 'cutadapt --version')
Cutadapt version: 4.4
Cutadapt seems to be using Python 3! Proceeding with multi-core enabled Cutadapt using 4 cores
pigz 2.7
Parallel gzip (pigz) detected. Proceeding with multicore (de)compression using 4 cores

Proceeding with 'pigz -p 4' for decompression
To decrease CPU usage of decompression, please install 'igzip' and run again

No quality encoding type selected. Assuming that the data provided uses Sanger encoded Phred scores (default)



AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	64490	AGATCGGAAGAGC	1000000	6.45
smallRNA	26	TGGAATTCTCGG	1000000	0.00
Nextera	19	CTGTCTCTTATA	1000000	0.00
Using Illumina adapter for trimming (count: 64490). Second best hit was smallRNA (count: 26)

Writing report to 'bonemarrow_6b.s.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz
Trimming mode: single-end
Trim Galore version: 0.6.10
Cutadapt version: 4.4
Python version: 3.10.10
Number of cores used for trimming: 4
Quality Phred score cutoff: 28
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length before a sequence gets removed: 50 bp
Running FastQC on the data once trimming has completed
Running FastQC with the following extra arguments: '--threads 16'
Output file(s) will be GZIP compressed

Cutadapt seems to be fairly up-to-date (version 4.4). Setting -j 4
Writing final adapter and quality trimmed output to bonemarrow_6b.s_trimmed.fq.gz


  >>> Now performing quality (cutoff '-q 28') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 4.4 with Python 3.10.10
Command line parameters: -j 4 -e 0.1 -q 28 -O 1 -a AGATCGGAAGAGC /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz
Processing single-end reads on 4 cores ...
Finished in 197.730 s (9.887 Âµs/read; 6.07 M reads/minute).

=== Summary ===

Total reads processed:              20,000,000
Reads with adapters:                 8,169,896 (40.8%)
Reads written (passing filters):    20,000,000 (100.0%)

Total basepairs processed: 2,020,000,000 bp
Quality-trimmed:              57,380,634 bp (2.8%)
Total written (filtered):  1,917,275,659 bp (94.9%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 8169896 times

Minimum overlap: 1
No. of allowed errors:
1-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 28.6%
  C: 30.4%
  G: 25.3%
  T: 15.4%
  none/other: 0.3%

Overview of removed sequences
length	count	expect	max.err	error counts
1	4062384	5000000.0	0	4062384
2	1542606	1250000.0	0	1542606
3	405560	312500.0	0	405560
4	155003	78125.0	0	155003
5	100866	19531.2	0	100866
6	113601	4882.8	0	113601
7	80230	1220.7	0	80230
8	90582	305.2	0	90582
9	140437	76.3	0	140025 412
10	53363	19.1	1	52414 949
11	72810	4.8	1	71961 849
12	71524	1.2	1	70746 778
13	81539	0.3	1	80699 840
14	74745	0.3	1	73810 935
15	80945	0.3	1	80013 932
16	68700	0.3	1	67772 928
17	97686	0.3	1	96568 1118
18	89058	0.3	1	88084 974
19	36761	0.3	1	36133 628
20	65013	0.3	1	64321 692
21	55515	0.3	1	54795 720
22	53509	0.3	1	52812 697
23	54403	0.3	1	53708 695
24	51753	0.3	1	51027 726
25	47951	0.3	1	47339 612
26	37758	0.3	1	37203 555
27	44551	0.3	1	43934 617
28	39529	0.3	1	38909 620
29	35335	0.3	1	34733 602
30	49238	0.3	1	48619 619
31	13499	0.3	1	13149 350
32	26457	0.3	1	26111 346
33	16495	0.3	1	16126 369
34	18974	0.3	1	18667 307
35	15811	0.3	1	15471 340
36	15992	0.3	1	15692 300
37	11987	0.3	1	11720 267
38	11243	0.3	1	10946 297
39	11420	0.3	1	11083 337
40	10231	0.3	1	9469 762
41	12877	0.3	1	12543 334
42	1757	0.3	1	1460 297
43	6209	0.3	1	5999 210
44	2980	0.3	1	2887 93
45	1320	0.3	1	1253 67
46	1610	0.3	1	1547 63
47	2071	0.3	1	1972 99
48	2848	0.3	1	2768 80
49	915	0.3	1	836 79
50	1360	0.3	1	1291 69
51	1234	0.3	1	1154 80
52	915	0.3	1	853 62
53	905	0.3	1	801 104
54	982	0.3	1	771 211
55	940	0.3	1	872 68
56	200	0.3	1	144 56
57	243	0.3	1	178 65
58	557	0.3	1	410 147
59	650	0.3	1	567 83
60	319	0.3	1	215 104
61	451	0.3	1	344 107
62	341	0.3	1	257 84
63	275	0.3	1	196 79
64	485	0.3	1	231 254
65	680	0.3	1	301 379
66	478	0.3	1	343 135
67	310	0.3	1	181 129
68	426	0.3	1	226 200
69	597	0.3	1	239 358
70	1102	0.3	1	336 766
71	1413	0.3	1	533 880
72	1710	0.3	1	503 1207
73	2864	0.3	1	555 2309
74	5452	0.3	1	832 4620
75	5083	0.3	1	1231 3852
76	1116	0.3	1	825 291
77	89	0.3	1	55 34
78	16	0.3	1	4 12
79	11	0.3	1	0 11
80	11	0.3	1	1 10
81	17	0.3	1	1 16
82	16	0.3	1	2 14
83	18	0.3	1	4 14
84	17	0.3	1	3 14
85	17	0.3	1	5 12
86	20	0.3	1	2 18
87	16	0.3	1	9 7
88	19	0.3	1	5 14
89	16	0.3	1	3 13
90	9	0.3	1	4 5
91	17	0.3	1	5 12
92	24	0.3	1	6 18
93	28	0.3	1	3 25
94	14	0.3	1	2 12
95	12	0.3	1	1 11
96	19	0.3	1	5 14
97	41	0.3	1	7 34
98	56	0.3	1	3 53
99	76	0.3	1	3 73
100	195	0.3	1	18 177
101	383	0.3	1	28 355

RUN STATISTICS FOR INPUT FILE: /work/binf-courses/binf694/project_1/raw_data/bonemarrow/bonemarrow_6b.s.fastq.gz
=============================================
20000000 sequences processed in total
Sequences removed because they became shorter than the length cutoff of 50 bp:	510272 (2.6%)


  >>> Now running FastQC on the data <<<

Started analysis of bonemarrow_6b.s_trimmed.fq.gz
Approx 5% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 10% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 15% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 20% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 25% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 30% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 35% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 40% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 45% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 50% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 55% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 60% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 65% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 70% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 75% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 80% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 85% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 90% complete for bonemarrow_6b.s_trimmed.fq.gz
Approx 95% complete for bonemarrow_6b.s_trimmed.fq.gz
Analysis complete for bonemarrow_6b.s_trimmed.fq.gz
================================================================================
JOB COMPLETED: Tue Apr 15 11:05:10 PM EDT 2025
================================================================================
